// Package messages provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package messages

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"

	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Message defines model for Message.
type Message struct {
	Id      *uint   `json:"id,omitempty"`
	Message *string `json:"message,omitempty"`
}

// PostMessagesJSONRequestBody defines body for PostMessages for application/json ContentType.
type PostMessagesJSONRequestBody = Message

// PatchMessagesJSONRequestBody defines body for PatchMessages for application/json ContentType.
type PatchMessagesJSONRequestBody = Message

// DeleteMessagesParams defines parameters for DeleteMessages.
type DeleteMessagesParams struct {
	Id uint `form:"id" json:"id"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all messages
	// (GET /messages)
	GetMessages(ctx echo.Context) error
	// Create a new message
	// (POST /messages)
	PostMessages(ctx echo.Context) error
	// Update an existing message
    // (PATCH /messages)
	PatchMessages(ctx echo.Context, request PatchMessagesRequestObject) error
    // Delete a message
    // (DELETE /messages/:id)
    DeleteMessages(ctx echo.Context, request DeleteMessagesRequestObject) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetMessages converts echo context to params.
func (w *ServerInterfaceWrapper) GetMessages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMessages(ctx)
	return err
}

// PostMessages converts echo context to params.
func (w *ServerInterfaceWrapper) PostMessages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostMessages(ctx)
	return err
}
// PatchMessages converts echo context to params.
func (w *ServerInterfaceWrapper) PatchMessages(ctx echo.Context) error {
    var request PatchMessagesRequestObject

    // Извлекаем ID из параметров URL
    idParam := ctx.Param("id")
    id, err := strconv.ParseUint(idParam, 10, 32)
    if err != nil {
        return echo.NewHTTPError(http.StatusBadRequest, "invalid id")
    }
    request.Id = uint(id)

    // Извлекаем тело запроса
    var body PatchMessagesJSONRequestBody
    if err := ctx.Bind(&body); err != nil {
        return err
    }
    request.Body = &body

    // Вызов обработчика
    err = w.Handler.PatchMessages(ctx, request)
    return err
}

// DeleteMessages converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMessages(ctx echo.Context) error {
    var request DeleteMessagesRequestObject

    // Извлекаем ID из параметров URL
    idParam := ctx.Param("id")
    id, err := strconv.ParseUint(idParam, 10, 32)
    if err != nil {
        return echo.NewHTTPError(http.StatusBadRequest, "invalid id")
    }
    request.Id = uint(id)

    // Вызов обработчика
    err = w.Handler.DeleteMessages(ctx, request)
    return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/messages", wrapper.GetMessages)
	router.POST(baseURL+"/messages", wrapper.PostMessages)
	router.PATCH(baseURL+"/messages/:id", wrapper.PatchMessages)
	router.DELETE(baseURL+"/messages/:id", wrapper.DeleteMessages)

}

type GetMessagesRequestObject struct {
}

type GetMessagesResponseObject interface {
	VisitGetMessagesResponse(w http.ResponseWriter) error
}

type GetMessages200JSONResponse []Message

func (response GetMessages200JSONResponse) VisitGetMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostMessagesRequestObject struct {
	Body *PostMessagesJSONRequestBody
}

type PostMessagesResponseObject interface {
	VisitPostMessagesResponse(w http.ResponseWriter) error
}

type PostMessages201JSONResponse Message

func (response PostMessages201JSONResponse) VisitPostMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}
type PatchMessagesRequestObject struct {
    Id   uint                        `param:"id"` // ID сообщения
    Body *PatchMessagesJSONRequestBody `json:"body"` // Тело запроса
}

type PatchMessagesResponseObject interface {
    VisitPatchMessagesResponse(w http.ResponseWriter) error
}

type PatchMessages200JSONResponse Message

func (response PatchMessages200JSONResponse) VisitPatchMessagesResponse(w http.ResponseWriter) error {
    w.Header().Set("Content-Type", "application/json")
    w.WriteHeader(200)

    return json.NewEncoder(w).Encode(response)
}

type DeleteMessagesRequestObject struct {
    Id uint `param:"id"` // ID сообщения
}

type DeleteMessagesResponseObject interface {
    VisitDeleteMessagesResponse(w http.ResponseWriter) error
}

type DeleteMessages204Response struct{}

func (response DeleteMessages204Response) VisitDeleteMessagesResponse(w http.ResponseWriter) error {
    w.WriteHeader(204) // No Content
    return nil
}

// StrictServerInterface представляет все серверные обработчики.
type StrictServerInterface interface {
    // Получить все сообщения
    // (GET /messages)
    GetMessages(ctx context.Context, request GetMessagesRequestObject) (GetMessagesResponseObject, error)
    // Создать новое сообщение
    // (POST /messages)
    PostMessages(ctx context.Context, request PostMessagesRequestObject) (PostMessagesResponseObject, error)
    // Обновить сообщение
    // (PATCH /messages/{id})
    PatchMessages(ctx context.Context, request PatchMessagesRequestObject) (PatchMessagesResponseObject, error)
    // Удалить сообщение
    // (DELETE /messages/{id})
    DeleteMessages(ctx context.Context, request DeleteMessagesRequestObject) (DeleteMessagesResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

type strictHandler struct {
    ssi         StrictServerInterface
    middlewares []StrictMiddlewareFunc
}
func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
    return &strictHandler{ssi: ssi, middlewares: middlewares}
}


// GetMessages operation middleware
func (sh *strictHandler) GetMessages(ctx echo.Context) error {
    var request GetMessagesRequestObject
    handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
        return sh.ssi.GetMessages(ctx.Request().Context(), request.(GetMessagesRequestObject))
    }
    for _, middleware := range sh.middlewares {
        handler = middleware(handler, "GetMessages")
    }

    response, err := handler(ctx, request)
    if err != nil {
        return err
    } else if validResponse, ok := response.(GetMessagesResponseObject); ok {
        return validResponse.VisitGetMessagesResponse(ctx.Response())
    } else if response != nil {
        return fmt.Errorf("unexpected response type: %T", response)
    }
    return nil
}

// PostMessages operation middleware
func (sh *strictHandler) PostMessages(ctx echo.Context) error {
    var request PostMessagesRequestObject
    var body PostMessagesJSONRequestBody
    if err := ctx.Bind(&body); err != nil {
        return err
    }
    request.Body = &body

    handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
        return sh.ssi.PostMessages(ctx.Request().Context(), request.(PostMessagesRequestObject))
    }
    for _, middleware := range sh.middlewares {
        handler = middleware(handler, "PostMessages")
    }

    response, err := handler(ctx, request)
    if err != nil {
        return err
    } else if validResponse, ok := response.(PostMessagesResponseObject); ok {
        return validResponse.VisitPostMessagesResponse(ctx.Response())
    } else if response != nil {
        return fmt.Errorf("unexpected response type: %T", response)
    }
    return nil
}

// PatchMessages operation middleware
func (sh *strictHandler) PatchMessages(ctx echo.Context, request PatchMessagesRequestObject) error {
    handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
        return sh.ssi.PatchMessages(ctx.Request().Context(), request.(PatchMessagesRequestObject))
    }
    
    for _, middleware := range sh.middlewares {
        handler = middleware(handler, "PatchMessages")
    }

    // Вызов обработчика
    response, err := handler(ctx, request)
    if err != nil {
        return err
    } else if validResponse, ok := response.(PatchMessagesResponseObject); ok {
        return validResponse.VisitPatchMessagesResponse(ctx.Response())
    } else if response != nil {
        return fmt.Errorf("unexpected response type: %T", response)
    }
    return nil
}

/// DeleteMessages operation middleware
func (sh *strictHandler) DeleteMessages(ctx echo.Context, request DeleteMessagesRequestObject) error {
    // Извлекаем ID из параметров URL
    idParam := ctx.Param("id")
    id, err := strconv.ParseUint(idParam, 10, 32)
    if err != nil {
        return echo.NewHTTPError(http.StatusBadRequest, "invalid id")
    }
    request.Id = uint(id)

    handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
        return sh.ssi.DeleteMessages(ctx.Request().Context(), request.(DeleteMessagesRequestObject))
    }
    for _, middleware := range sh.middlewares {
        handler = middleware(handler, "DeleteMessages")
    }

    response, err := handler(ctx, request)
    if err != nil {
        return err
    } else if validResponse, ok := response.(DeleteMessagesResponseObject); ok {
        return validResponse.VisitDeleteMessagesResponse(ctx.Response())
    } else if response != nil {
        return fmt.Errorf("unexpected response type: %T", response)
    }
    return nil
}
